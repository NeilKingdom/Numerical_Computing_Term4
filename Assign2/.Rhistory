input <- readline()
extDate <- getIndexFromDate(input)
y <- a*exp(b * extDate)
print(paste("Total Estimate Vaccinations on ", extDate, ":", y))
# Plot data on graph
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
#Save as PDF
pdf("total_vacc.pdf")
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
dev.off()
}
else if(input == 2) {
break
}
else {
print("Input was outside of range")
}
}
menu1()
}
bestFitFun <- function() {
# !Important! -- set dir and file to match your environment (with trailing forward slash) --
setwd("/home/neil/devel/school/2021_Fall/Numerical_Computing_Term4/Assign2/")
menu1()
}
bestFitFun()
library("openxlsx")
# Functions
a1 <- function(xVec, yVec, n) {
numerator <- (n * sum(xVec * yVec) - sum(xVec) * sum(yVec))
denominator <- (n * sum(xVec^2) - (sum(xVec))^2)
return (numerator/denominator)
}
a0 <- function(a1, xVec, yVec, n) {
return (sum(yVec)/n - a1 * (sum(xVec)/n))
}
getIndexFromDate <- function(date) {
date.split <- strsplit(date, "\\/")
day <- as.numeric(unlist(date.split)[1])
month <- as.numeric(unlist(date.split)[2])
year <- as.numeric(unlist(date.split)[3])
# Return early instead of checking logic
if(month == 1)
return (day)
index = 0
# Very hacky, but there is not a nicer way to calculate day of year without bloated libraries
magic = 3968
if(month == 2)
index <- index + 31
else if((bitwShiftR(magic,month-1)%%2) == 0)
index <- index + floor((month-1) * (365/12)) -1
else
index <- index + floor((month-1) * (365/12))
index <- index + day
return (index)
}
menu1 <- function() {
repeat {
print("Menu")
print("1. Exponential Fit")
print("2. Quit")
input <- as.numeric(readline())
if(input == 1 | input == 2)
break
print("Input was outside of range")
}
if(input == 2)
return ("Exited Program")
repeat {
print("Please enter start date (dd/mm/yyyy):")
startDate <- readline()
startDate <- getIndexFromDate(startDate)
print("Please enter end date (dd/mm/yyyy):")
endDate <- readline()
endDate <- getIndexFromDate(endDate)
if(endDate > (startDate+60)
& startDate > getIndexFromDate("01/02/2021")
& endDate < getIndexFromDate("01/05/2021"))
break
print("End date must be greater than start date + 60 days")
print("Dates must fall between 01/02/2021 and 01/05/2021")
}
# x = day of year
xVec <- seq(startDate, endDate)
# y = ln() of total vaccinations
rows <- COVID19_data$Number >= startDate & COVID19_data$Number <= endDate
yVec <- subset(COVID19_data$total_vaccinations, rows)
yVecLog <- log(yVec)
n <- length(yVecLog)
a1 <- a1(xVec, yVecLog, n)
a0 <- a0(a1, xVec, yVecLog, n)
a <- exp(a0)
b <- a1
a.copy <- a
b.copy <- b
print("The best exponential fit is of the form:")
print(paste("y =", round(a.copy,5), "e^", round(b.copy,5), "t"))
# Line of Best Fit
lobf <- c()
for(t in 1:n)
lobf[length(lobf) + 1] <- a*exp(b * t)
menu2(a, b, xVec, yVec, lobf)
}
menu2 <- function(a, b, xVec, yVec, lobf) {
repeat {
print("", quote=F)
print("1. Extrapolation")
print("2. Main Menu")
input <- as.numeric(readline())
if(input == 1) {
print("Please enter the date to extrapolate to (dd/mm/yyyy):")
input <- readline()
extDate <- getIndexFromDate(input)
y <- a*exp(b * extDate)
print(paste("Total Estimate Vaccinations on ", extDate, ":", y))
# Plot data on graph
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
#Save as PDF
pdf("total_vacc.pdf")
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
dev.off()
}
else if(input == 2) {
break
}
else {
print("Input was outside of range")
}
}
menu1()
}
bestFitFun <- function() {
# !Important! -- set dir and file to match your environment (with trailing forward slash) --
setwd("/home/neil/devel/school/2021_Fall/Numerical_Computing_Term4/Assign2/")
# Import CSV File
print("Please enter the name of the file to open:")
file <- readline()
COVID19_data <- read.xlsx(file)
print(summary(COVID19_data[-seq_len(2)]))
menu1()
}
bestFitFun()
#Global variable
COVID19_data <- ""
# Library Files
library("openxlsx")
# Functions
a1 <- function(xVec, yVec, n) {
numerator <- (n * sum(xVec * yVec) - sum(xVec) * sum(yVec))
denominator <- (n * sum(xVec^2) - (sum(xVec))^2)
return (numerator/denominator)
}
a0 <- function(a1, xVec, yVec, n) {
return (sum(yVec)/n - a1 * (sum(xVec)/n))
}
getIndexFromDate <- function(date) {
date.split <- strsplit(date, "\\/")
day <- as.numeric(unlist(date.split)[1])
month <- as.numeric(unlist(date.split)[2])
year <- as.numeric(unlist(date.split)[3])
# Return early instead of checking logic
if(month == 1)
return (day)
index = 0
# Very hacky, but there is not a nicer way to calculate day of year without bloated libraries
magic = 3968
if(month == 2)
index <- index + 31
else if((bitwShiftR(magic,month-1)%%2) == 0)
index <- index + floor((month-1) * (365/12)) -1
else
index <- index + floor((month-1) * (365/12))
index <- index + day
return (index)
}
menu1 <- function() {
repeat {
print("Menu")
print("1. Exponential Fit")
print("2. Quit")
input <- as.numeric(readline())
if(input == 1 | input == 2)
break
print("Input was outside of range")
}
if(input == 2)
return ("Exited Program")
repeat {
print("Please enter start date (dd/mm/yyyy):")
startDate <- readline()
startDate <- getIndexFromDate(startDate)
print("Please enter end date (dd/mm/yyyy):")
endDate <- readline()
endDate <- getIndexFromDate(endDate)
if(endDate > (startDate+60)
& startDate > getIndexFromDate("01/02/2021")
& endDate < getIndexFromDate("01/05/2021"))
break
print("End date must be greater than start date + 60 days")
print("Dates must fall between 01/02/2021 and 01/05/2021")
}
# x = day of year
xVec <- seq(startDate, endDate)
# y = ln() of total vaccinations
rows <- COVID19_data$Number >= startDate & COVID19_data$Number <= endDate
yVec <- subset(COVID19_data$total_vaccinations, rows)
yVecLog <- log(yVec)
n <- length(yVecLog)
a1 <- a1(xVec, yVecLog, n)
a0 <- a0(a1, xVec, yVecLog, n)
a <- exp(a0)
b <- a1
a.copy <- a
b.copy <- b
print("The best exponential fit is of the form:")
print(paste("y =", round(a.copy,5), "e^", round(b.copy,5), "t"))
# Line of Best Fit
lobf <- c()
for(t in 1:n)
lobf[length(lobf) + 1] <- a*exp(b * t)
menu2(a, b, xVec, yVec, lobf)
}
menu2 <- function(a, b, xVec, yVec, lobf) {
repeat {
print("", quote=F)
print("1. Extrapolation")
print("2. Main Menu")
input <- as.numeric(readline())
if(input == 1) {
print("Please enter the date to extrapolate to (dd/mm/yyyy):")
input <- readline()
extDate <- getIndexFromDate(input)
y <- a*exp(b * extDate)
print(paste("Total Estimate Vaccinations on ", extDate, ":", y))
# Plot data on graph
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
#Save as PDF
pdf("total_vacc.pdf")
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
dev.off()
}
else if(input == 2) {
break
}
else {
print("Input was outside of range")
}
}
menu1()
}
bestFitFun <- function() {
# !Important! -- set dir and file to match your environment (with trailing forward slash) --
setwd("/home/neil/devel/school/2021_Fall/Numerical_Computing_Term4/Assign2/")
# Import CSV File
print("Please enter the name of the file to open:")
file <- readline()
COVID19_data <- read.xlsx(file)
print(summary(COVID19_data[-seq_len(2)]))
menu1()
}
bestFitFun()
# Library Files
library("openxlsx")
# Functions
a1 <- function(xVec, yVec, n) {
numerator <- (n * sum(xVec * yVec) - sum(xVec) * sum(yVec))
denominator <- (n * sum(xVec^2) - (sum(xVec))^2)
return (numerator/denominator)
}
a0 <- function(a1, xVec, yVec, n) {
return (sum(yVec)/n - a1 * (sum(xVec)/n))
}
getIndexFromDate <- function(date) {
date.split <- strsplit(date, "\\/")
day <- as.numeric(unlist(date.split)[1])
month <- as.numeric(unlist(date.split)[2])
year <- as.numeric(unlist(date.split)[3])
# Return early instead of checking logic
if(month == 1)
return (day)
index = 0
# Very hacky, but there is not a nicer way to calculate day of year without bloated libraries
magic = 3968
if(month == 2)
index <- index + 31
else if((bitwShiftR(magic,month-1)%%2) == 0)
index <- index + floor((month-1) * (365/12)) -1
else
index <- index + floor((month-1) * (365/12))
index <- index + day
return (index)
}
menu2 <- function(a, b, xVec, yVec, lobf) {
repeat {
print("", quote=F)
print("1. Extrapolation")
print("2. Main Menu")
input <- as.numeric(readline())
if(input == 1) {
print("Please enter the date to extrapolate to (dd/mm/yyyy):")
input <- readline()
extDate <- getIndexFromDate(input)
y <- a*exp(b * extDate)
print(paste("Total Estimate Vaccinations on ", extDate, ":", y))
# Plot data on graph
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
#Save as PDF
pdf("total_vacc.pdf")
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
dev.off()
}
else if(input == 2) {
break
}
else {
print("Input was outside of range")
}
}
menu1()
}
bestFitFun <- function() {
# !Important! -- set dir and file to match your environment (with trailing forward slash) --
setwd("/home/neil/devel/school/2021_Fall/Numerical_Computing_Term4/Assign2/")
# Import CSV File
print("Please enter the name of the file to open:")
file <- readline()
COVID19_data <- read.xlsx(file)
print(summary(COVID19_data[-seq_len(2)]))
# Menu 1
repeat {
print("Menu")
print("1. Exponential Fit")
print("2. Quit")
input <- as.numeric(readline())
if(input == 1 | input == 2)
break
print("Input was outside of range")
}
if(input == 2)
return ("Exited Program")
repeat {
print("Please enter start date (dd/mm/yyyy):")
startDate <- readline()
startDate <- getIndexFromDate(startDate)
print("Please enter end date (dd/mm/yyyy):")
endDate <- readline()
endDate <- getIndexFromDate(endDate)
if(endDate > (startDate+60)
& startDate > getIndexFromDate("01/02/2021")
& endDate < getIndexFromDate("01/05/2021"))
break
print("End date must be greater than start date + 60 days")
print("Dates must fall between 01/02/2021 and 01/05/2021")
}
# x = day of year
xVec <- seq(startDate, endDate)
# y = ln() of total vaccinations
rows <- COVID19_data$Number >= startDate & COVID19_data$Number <= endDate
yVec <- subset(COVID19_data$total_vaccinations, rows)
yVecLog <- log(yVec)
n <- length(yVecLog)
a1 <- a1(xVec, yVecLog, n)
a0 <- a0(a1, xVec, yVecLog, n)
a <- exp(a0)
b <- a1
a.copy <- a
b.copy <- b
print("The best exponential fit is of the form:")
print(paste("y =", round(a.copy,5), "e^", round(b.copy,5), "t"))
# Line of Best Fit
lobf <- c()
for(t in 1:n)
lobf[length(lobf) + 1] <- a*exp(b * t)
menu2(a, b, xVec, yVec, lobf)
}
bestFitFun()
# Library Files
library("openxlsx")
# Functions
a1 <- function(xVec, yVec, n) {
numerator <- (n * sum(xVec * yVec) - sum(xVec) * sum(yVec))
denominator <- (n * sum(xVec^2) - (sum(xVec))^2)
return (numerator/denominator)
}
a0 <- function(a1, xVec, yVec, n) {
return (sum(yVec)/n - a1 * (sum(xVec)/n))
}
getIndexFromDate <- function(date) {
date.split <- strsplit(date, "\\/")
day <- as.numeric(unlist(date.split)[1])
month <- as.numeric(unlist(date.split)[2])
year <- as.numeric(unlist(date.split)[3])
# Return early instead of checking logic
if(month == 1)
return (day)
index = 0
# Very hacky, but there is not a nicer way to calculate day of year without bloated libraries
magic = 3968
if(month == 2)
index <- index + 31
else if((bitwShiftR(magic,month-1)%%2) == 0)
index <- index + floor((month-1) * (365/12)) -1
else
index <- index + floor((month-1) * (365/12))
index <- index + day
return (index)
}
menu2 <- function(a, b, xVec, yVec, lobf) {
repeat {
print("", quote=F)
print("1. Extrapolation")
print("2. Main Menu")
input <- as.numeric(readline())
if(input == 1) {
print("Please enter the date to extrapolate to (dd/mm/yyyy):")
input <- readline()
extDate <- getIndexFromDate(input)
y <- a*exp(b * extDate)
print(paste("Total Estimate Vaccinations on ", extDate, ":", y))
# Plot data on graph
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
#Save as PDF
pdf("total_vacc.pdf")
plot(xVec, yVec, type="l", col="red", xlab="Day of the year (2021)", ylab="Total vaccinations (Millions)", main="Total Vaccinations Over Time (2021)")
par(new=TRUE)
plot(xVec, lobf, type="l", col="blue", xlab="", ylab="", xaxt="n", yaxt="n")
dev.off()
}
else if(input == 2) {
break
}
else {
print("Input was outside of range")
}
}
menu1()
}
bestFitFun <- function() {
# !Important! -- set dir and file to match your environment (with trailing forward slash) --
setwd("/home/neil/devel/school/2021_Fall/Numerical_Computing_Term4/Assign2/")
# Import CSV File
print("Please enter the name of the file to open:")
file <- readline()
COVID19_data <- read.xlsx(file)
print(summary(COVID19_data[-seq_len(2)]))
# Menu 1
repeat {
print("Menu")
print("1. Exponential Fit")
print("2. Quit")
input <- as.numeric(readline())
if(input == 1 | input == 2)
break
print("Input was outside of range")
}
if(input == 2)
return ("Exited Program")
repeat {
print("Please enter start date (dd/mm/yyyy):")
startDate <- readline()
startDate <- getIndexFromDate(startDate)
print("Please enter end date (dd/mm/yyyy):")
endDate <- readline()
endDate <- getIndexFromDate(endDate)
if(endDate > (startDate+60)
& startDate > getIndexFromDate("01/02/2021")
& endDate < getIndexFromDate("01/05/2021"))
break
print("End date must be greater than start date + 60 days")
print("Dates must fall between 01/02/2021 and 01/05/2021")
}
# x = day of year
xVec <- seq(startDate, endDate)
# y = ln() of total vaccinations
rows <- COVID19_data$Number >= startDate & COVID19_data$Number <= endDate
yVec <- subset(COVID19_data$total_vaccinations, rows)
yVecLog <- log(yVec)
n <- length(yVecLog)
a1 <- a1(xVec, yVecLog, n)
a0 <- a0(a1, xVec, yVecLog, n)
a <- exp(a0)
b <- a1
a.copy <- a
b.copy <- b
print("The best exponential fit is of the form:")
print(paste("y =", round(a.copy,5), "e^", round(b.copy,5), "t"))
# Line of Best Fit
lobf <- c()
for(t in 1:n)
lobf[length(lobf) + 1] <- a*exp(b * t)
menu2(a, b, xVec, yVec, lobf)
}
bestFitFun()
bestFitFun()

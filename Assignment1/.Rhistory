setwd("/home/neil/devel/school/2021_Fall/num_comp/Assignment1")
myCarsList <- read.csv("assignment1.csv", sep=",")
head(myCarsList)
# invisible() suppresses output
myCarsList <- invisible(myCarsList[-1,])
nrow(myCarsList)
ncol(myCarsList)
# Remove commas (Seems to only be an issue in my environment)
invisible(gsub(",", "", myCarsList))
# Type cast columns
myCarsList$MPG <- as.numeric(myCarsList$MPG)
myCarsList$Displacement <- as.numeric(myCarsList$Displacement)
myCarsList$Horsepower <- as.numeric(myCarsList$Horsepower)
myCarsList$Weight <- as.numeric(myCarsList$Weight)
myCarsList$Acceleration <- as.double(myCarsList$Acceleration)
myCarsList$Origin <- as.factor(myCarsList$Origin)
# Find Car(s) with: max MPG, Horsepower > 100, Acceleration < 15
maxMPG <- myCarsList[myCarsList$MPG==max(myCarsList$MPG),1]
paste("Maximum MPG:", maxMPG)
hp.gtHundred <- myCarsList[(myCarsList$Horsepower > 100),]
acc.ltFifteen <- myCarsList[(myCarsList$Acceleration < 15),]
# Output dataframes as CSV
write.csv(hp.gtHundred, paste(getwd(),"Horsepower.csv", sep = "/"))
write.csv(acc.ltFifteen, paste(getwd(),"Acceleration.csv", sep = "/"))
# Plot Histogram
secondSmallest <- sort(unique(myCarsList$MPG),decreasing = FALSE)[2]
hist(myCarsList$MPG, main = "MPG Histogram", xlab = "MPG", col = "Red", xlim = c(secondSmallest,max(myCarsList$MPG)))
# Set RNG seed to constant num 75
set.seed(75)
aVec <- runif(50, min = 0, max = 500)
bVec <- runif(50, min = 0, max = 500)
aVec
bVec
# Same length for aVec and bVec
n <- length(aVec)
cVec <- matrix(bVec[2:n] - aVec[1:n-1], nrow = 7, ncol = 7)
cVec
cVec <- c(cos(bVec[1:n-1])/sin(aVec[2:n]))
cVec
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
# Set RNG seed to constant num 75
set.seed(75)
aVec <- runif(50, min = 0, max = 500)
bVec <- runif(50, min = 0, max = 500)
aVec
bVec
# Same length for aVec and bVec
n <- length(aVec)
cVec <- matrix(bVec[2:n] - aVec[1:n-1], nrow = 7, ncol = 7)
cVec
cVec <- c(cos(bVec[1:n-1])/sin(aVec[2:n]))
cVec
i <- 1
a <- aVec
n <- length(aVec)
res <- i:n-1; sum((exp(0-a[i+1]))/(a[i] + 5))
i <- 1
a <- c(1,2,3,4,5)
n <- length(aVec)
res <- i:n-1; sum((exp(0-a[i+1]))/(a[i] + 5))
i <- 1
a <- c(1,2,3,4,5)
n <- length(aVec)
res <- i:n-1; sum((exp(-a[i+1]))/(a[i] + 5))
i <- 1
a <- c(1,2,3,4,5)
n <- length(aVec)
res <- i:n-1; sum((exp(-a[i+1]))/(a[i] + 5))
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
i <- 1
a <- c(1,2,3,4,5)
n <- length(aVec)
res <- i:n-1; sum((exp(-a[i+1]))/(a[i] + 5))
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- (input %% leftHalf) * (10*length(rightHalf-1))
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- (input %% leftHalf) * (10 ** length(rightHalf-1))
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
rightHalf <- rightHalf * (10^(length(rightHalf)-1))
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
pow <- (10^(length(rightHalf)-1))
pow
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
pow <- 10 ** (length(rightHalf)-1)
pow
rightHalf <- rightHalf * (10^(length(rightHalf)-1))
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
length(rightHalf)
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
options(scipen = 0)
rightHalf
#pow <- 10 ** (length(rightHalf)-1)
#rightHalf <- rightHalf * (10^(length(rightHalf)-1))
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
options(scipen = 999)
rightHalf
#pow <- 10 ** (length(rightHalf)-1)
#rightHalf <- rightHalf * (10^(length(rightHalf)-1))
leftHalf
rightHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
format(rightHalf, scientific = T)
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
leftHalf
rightHalf
# Convert to binary
decToBin <- function(dec) {
rem <- 0
bin <- 0
n <- length(dec)
for(i in 0:n-1) {
rem <- dec %% 10
if(rem > 0)
bin <- bin + (10^i + rem)
else
bin <- bin + (10^i)
dec <- dec/10
}
return (bin)
}
leftHalf <- decToBin(leftHalf)
leftHalf
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
123.456
input <- as.numeric(readline())
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
rightHalf <- rightHalf * (10^numOfDigits(rightHalf))
# Get number of digits
numOfDigits <- function(num) {
i <- 0
rem <- 0
tmpNum <- num
if(num > 0) {
while(tmpNum != 0) {
tmpNum <- tmpNum/10
i <- i + 1
}
return (i)
}
else if(num < 0) {
while(tmpNum != 0) {
tmpNum <- (tmpNum*10) - (tmpNum %% 1)
i <- i + 1
}
return (i)
}
else {
return (0)
}
}
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
rightHalf <- rightHalf * (10^numOfDigits(rightHalf))
leftHalf
rightHalf
# Convert to binary
decToBin <- function(dec) {
rem <- 0
bin <- 0
n <- length(dec)
for(i in 0:n-1) {
rem <- dec %% 10
if(rem > 0)
bin <- bin + (10^i + rem)
else
bin <- bin + (10^i)
dec <- dec/10
}
return (bin)
}
leftHalf <- decToBin(leftHalf)
leftHalf
# Get number of digits
numOfDigits <- function(num) {
i <- 0
rem <- 0
tmpNum <- num
if(num > 0) {
while(tmpNum != 0) {
tmpNum <- tmpNum/10
i <- i + 1
}
return (i)
}
else if(num < 0) {
while(tmpNum != 0) {
tmpNum <- (tmpNum*10) - (tmpNum %% 1)
i <- i + 1
}
return (i)
}
else {
return (0)
}
}
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
r.digits <- numOfDigits(rightHalf)
l.digits <- numOfDigits(leftHalf)
rightHalf <- rightHalf * (10 ** r.digits)
leftHalf
rightHalf
# Convert to binary
decToBin <- function(dec, digits) {
rem <- 0
bin <- 0
for(i in 0:digits-1) {
rem <- dec %% 10
if(rem > 0)
bin <- bin + (10^i + rem)
else
bin <- bin + (10^i)
dec <- dec/10
}
return (bin)
}
leftHalf <- decToBin(leftHalf, l.digits)
leftHalf
# Get number of digits
numOfDigits <- function(num) {
i <- 0
rem <- 0
tmpNum <- num
if(num > 0) {
while(tmpNum != 0) {
tmpNum <- tmpNum/10
i <- i + 1
}
return (i)
}
else if(num < 0) {
while(tmpNum != 0) {
tmpNum <- (tmpNum*10) - (tmpNum %% 1)
i <- i + 1
}
return (i)
}
else {
return (0)
}
}
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
r.digits <- numOfDigits(rightHalf)
l.digits <- numOfDigits(leftHalf)
r.digits
l.digits
# Get number of digits
numOfDigits <- function(num) {
i <- 0
rem <- 0
tmpNum <- num
if(num > 0) {
while(tmpNum != 0) {
tmpNum <- tmpNum %% 10
i <- i + 1
}
return (i)
}
else if(num < 0) {
while(tmpNum != 0) {
tmpNum <- (tmpNum*10) - (tmpNum %% 1)
i <- i + 1
}
return (i)
}
else {
return (0)
}
}
print("Enter a decimal number to be converted to a IEEE-754 Floating Point Precision number: ")
input <- as.numeric(readline())
input
leftHalf <- floor(input)
rightHalf <- input %% leftHalf
r.digits <- numOfDigits(rightHalf)
l.digits <- numOfDigits(leftHalf)

#Final Assignment 3
#Neil Kingdom
# Functions
eulersMethod <- function(h, sec) {
# Initial condition (3 degrees C)
theta.i <- 3
# Calculate eulers given dx/dy + 2theta(t) = cos(4t)
yVec <- c()
# Set yVec[1] to be Eulers at theta0
yVec[length(yVec) + 1] <- theta.i
for(t in sec) {
fxy <- cos(4 * t) - (2 * theta.i)
yVec[length(yVec) + 1] <- theta.i + (fxy * h)
theta.i <- yVec[length(yVec)]
}
return (yVec)
}
rungeKuttaMethod <- function(h, sec) {
# Initial condition (3 degrees C)
theta.i <- 3
# Creating yVector
yVec <- c()
# Set yVec[1] to be Eulers at theta0
yVec[length(yVec) + 1] <- theta.i
# Setting up K vectors and xVectors
k1 <- c(0)
k2 <- c(0)
k3 <- c(0)
k4 <- c(0)
xVec <- c(0)
LK1 <- length(k1)
LK2 <- length(k2)
LK3 <- length(k3)
LK4 <- length(k4)
for(t in sec) {
LX <- length(xVec)
LY <- length(yVec)
k1[LK1 + 1] <- ((cos(4*(xVec[LX]))) - (2*(yVec[LY])))
LK1 <- length(k1)
k2[LK2 + 1] <- ((cos(4*((xVec[LX])+(h/2))))  -  (2*(((yVec[LY])) + ((h/2)*(k1[LK1]) ))))
LK2 <- length(k2)
k3[LK3 + 1] <- ((cos(4*((xVec[LX])+(h/2)))) - (2*(( ((yVec[LY])) + ((h/2)*(k2[LK2]) )))))
LK3 <- length(k3)
k4[LK4 + 1] <- ((cos(4*((xVec[LX])+(h)))) - (2*(( ((yVec[LY])) + ((h)*(k3[LK3]) )))))
LK4 <- length(k4)
yVec[LY + 1] <- ((yVec[length(yVec)]) + ((k1[LK1]) + (2*(k2[LK2])) + (2*(k3[LK3])) + (k4[LK4]))*(h/6))
xVec[LX + 1] <- xVec[LX]+h
}
return (yVec)
}
mainRunge <- function(h) {
sec.point2 <- seq(0, 2, h)
runge2 <- rungeKuttaMethod(h, sec.point2)
# Actual ODE
ODE <- c()
for(t in sec.point2)
ODE[length(ODE) + 1] <- ((0.1) * cos(4 * t)) + (0.2 * sin(4 * t)) + (2.9 * exp(-2 * t))
# Actual and Relative Errors
print(paste("Time(second)","       Exact Temp(C)","        Estimated Temp (C)","   Percentage Error(%)"))
print("-------------------------------------------------------------------------------------------------------")
for(i in 2:length(ODE)) {
ae <- abs(ODE[i] - runge2[i])
re <- (ae/ODE[i]) * 100
print(sprintf("%4.1f                     %4.3f            %4.3f                  %4.2f", sec.point2[i], ODE[i], runge2[i], re ))
}
}
mainEulers <- function(h) {
sec.point2 <- seq(0, 2, h)
eulers2 <- eulersMethod(h, sec.point2)
# Actual ODE
ODE <- c()
for(t in sec.point2)
ODE[length(ODE) + 1] <- ((0.1) * cos(4 * t)) + (0.2 * sin(4 * t)) + (2.9 * exp(-2 * t))
# Actual and Relative Errors
print(paste("Time(second)","       Exact Temp(C)","        Estimated Temp (C)","    Percentage Error(%)"))
print("-------------------------------------------------------------------------------------------------------")
for(i in 2:length(ODE)) {
ae <- abs(ODE[i] - eulers2[i])
re <- (ae/ODE[i]) * 100
print(sprintf("%4.1f                     %4.3f            %4.3f                  %4.2f", sec.point2[i], ODE[i], eulers2[i], re ))
}
}
mainMenu <- function() {
repeat {
print("", quote=F)
print(">> Choose the method for solving the ODE: ")
print("1. Euler's Method")
print("2. Runge-Kutta 4th Order Method")
input <- as.numeric(readline())
if(input == 1) {
print("Choose step size h ([1] 0.8, [2] 0.2, [3] 0.05) ")
input <- as.numeric(readline())
if(input == 1)
mainEulers(0.8)
else if(input == 2)
mainEulers(0.2)
else if(input == 3)
mainEulers(0.05)
else
print("Input was outside of range")
}
else if(input == 2) {
print("Choose step size h ([1] 0.8, [2] 0.2, [3] 0.05) ")
input <- as.numeric(readline())
if(input == 1)
mainRunge(0.8)
else if(input == 2)
mainRunge(0.2)
else if(input == 3)
mainRunge(0.05)
else
print("Input was outside of range")
}
else {
print("Input was outside of range")
}
}
}
mainMenu()
